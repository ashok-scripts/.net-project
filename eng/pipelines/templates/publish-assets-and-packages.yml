# Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information.
jobs:
- job: PublishAssetsAndPackages
  displayName: Publish Assets and Packages
  timeoutInMinutes: 25
  steps:
  ###################################################################################################################################################################
  # DOWNLOAD ARTIFACTS
  ###################################################################################################################################################################

  # Use a disabled, empty script to display the section header in the pipeline UI.
  - script:
    displayName: === Download Artifacts ===
    condition: false

  # Download the build artifacts from the Build job.
  - download: current
    displayName: Download Build Artifacts
    artifact: $(Build.BuildNumber)
    # Only download the necessary files for publishing.
    patterns: |
      VSSetup/Insertion/**
      packages/**

  # Download the staging artifacts from the Build job.
  - download: current
    displayName: Download Staging Artifacts
    artifact: Staging
    # Only download the necessary files for publishing.
    patterns: |
      MicroBuild/**
      OptProf/**

  ###################################################################################################################################################################
  # PUBLISH INSERTION
  ###################################################################################################################################################################
  
   # Runs the full build of the projects in the repository. See Build.proj for details. (required for BinSkim)
  - script: $(Build.SourcesDirectory)/build.cmd /v:normal /p:Configuration=$(BuildConfiguration) /p:CIBuild=true /p:Test=false
    displayName: Build All Projects

  ###################################################################################################################################################################
  # PUBLISH PACKAGES
  ###################################################################################################################################################################

  # Use a disabled, empty script to display the section header in the pipeline UI.
  - script:
    displayName: === Publish Packages ===
    condition: false

  # Downloads NuGet and adds it to the PATH.
  # See: https://docs.microsoft.com/azure/devops/pipelines/tasks/tool/nuget?view=azure-devops
  - task: NuGetToolInstaller@1
    displayName: Install NuGet

  # Authenticate with a service connection to be able to publish packages to external (different DevOps organization) NuGet feeds.
  # See: https://docs.microsoft.com/azure/devops/pipelines/tasks/package/nuget-authenticate?view=azure-devops
  - task: NuGetAuthenticate@1
    displayName: Authenticate NuGet
    inputs:
      nuGetServiceConnections: azure-public/vs-impl

  # Authenticates the .npmrc file for publishing to the internal AzDO feed.
  # See: https://learn.microsoft.com/azure/devops/pipelines/tasks/package/npm-authenticate?view=azure-devops
  - task: npmAuthenticate@0
    displayName: Authenticate NPM Feed
    inputs:
      workingFile: $(Build.SourcesDirectory)/src/Microsoft.VisualStudio.ProjectSystem.Managed/.npmrc

  # Publishes the NuGet packages to azure-public/vs-impl (https://dev.azure.com/azure-public/vside/_packaging?_a=feed&feed=vs-impl)
  - task: 1ES.PublishNuget@1
    displayName: Publish Packages to azure-public
    inputs:
      command: push
      packageParentPath: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)
      packagesToPush: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/packages/*.nupkg
      nuGetFeedType: external
      publishFeedCredentials: azure-public/vs-impl
      # This allows the task to succeed if duplicate packages exist. Packages cannot be overridden in a feed.
      # See: https://docs.microsoft.com/azure/devops/pipelines/tasks/package/nuget?view=azure-devops#arguments
      allowPackageConflicts: true

  # Publishes the NuGet packages to DevDiv/VS (https://dev.azure.com/DevDiv/DevDiv/_artifacts/feed/VS)
  # A separate process will republish these packages to DevDiv/VS-CoreXtFeeds (https://dev.azure.com/DevDiv/DevDiv/_artifacts/feed/VS-CoreXtFeeds)
  - task: 1ES.PublishNuget@1
    displayName: Publish Packages to DevDiv
    inputs:
      command: push
      packageParentPath: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)
      packagesToPush: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/packages/*.nupkg
      # Feed Endpoint: https://devdiv.pkgs.visualstudio.com/_packaging/VS/nuget/v3/index.json
      # Requires VssFeedId despite documentation here: https://docs.microsoft.com/azure/devops/pipelines/artifacts/nuget?view=azure-devops&tabs=yaml#publish-a-package
      publishVstsFeed: 97a41293-2972-4f48-8c0e-05493ae82010
      # This allows the task to succeed if duplicate packages exist. Packages cannot be overridden in a feed.
      # See: https://docs.microsoft.com/azure/devops/pipelines/tasks/package/nuget?view=azure-devops#arguments
      allowPackageConflicts: true

  # Publishes the Managed NuGet package to DevDiv/vs-green (https://dev.azure.com/devdiv/DevDiv/_artifacts/feed/vs-green)
  - task: 1ES.PublishNuget@1
    displayName: Publish NuGet Package
    inputs:
      command: push
      packageParentPath: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)
      packagesToPush: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/packages/Microsoft.VisualStudio.ProjectSystem.Managed.*.nupkg;!$(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/packages/Microsoft.VisualStudio.ProjectSystem.Managed.VS.*.nupkg
      publishVstsFeed: DevDiv/vs-green
      # This allows the task to succeed if duplicate packages exist. Packages cannot be overridden in a feed.
      # See: https://docs.microsoft.com/azure/devops/pipelines/tasks/package/nuget?view=azure-devops#arguments
      allowPackageConflicts: true

  # Publishes the NPM package to the internal AzDO feed.
  # Feed: https://dev.azure.com/devdiv/DevDiv/_artifacts/feed/vs-green/Npm/@microsoft%2Fmicrosoft.visualstudio.projectsystem.managed/
  # See: https://docs.npmjs.com/cli/v8/commands/npm-publish
  # npmrc doc: https://docs.npmjs.com/cli/v9/using-npm/config#npmrc-files
  - powershell: . '$(Build.SourcesDirectory)/eng/scripts/PublishNPMPackage.ps1' -npmrcPath '$(Build.SourcesDirectory)/src/Microsoft.VisualStudio.ProjectSystem.Managed/.npmrc' -tgzPath ((Get-ChildItem -Path '$(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/packages/microsoft-microsoft.visualstudio.projectsystem.managed-*.tgz').FullName)
    displayName: Publish NPM Package