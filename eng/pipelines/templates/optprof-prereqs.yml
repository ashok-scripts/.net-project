# Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information.

jobs:
- job: OptProfPreReqs
  displayName: OptProf Pre-reqs
  timeoutInMinutes: 60
  steps:

  # Runs the full build of the projects in the repository. See Build.proj for details.
  - script: $(Build.SourcesDirectory)/build.cmd /v:normal /p:Configuration=$(BuildConfiguration) /p:CIBuild=true /p:Test=false
    displayName: Build All Projects
    env:
      # The Microsoft.VisualStudio.Internal.MicroBuild.SetupTooling.props assumes this value is set, which sets the ManifestPublishUrl property.
      # The ManifestPublishUrl property is used in the FinalizeManifest target in Microsoft.VisualStudio.Setup.Tools.targets to set the correct drop destination for the VSMan assets (VSIX and sbom.json).
      # This is normally set via the MicroBuildSwixPlugin task as a pipeline variable. With modern setup authoring, we do not want to run this task prior to the build itself.
      VstsDropNames: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)
      # This allows NuGet to retry in situations related to "automatic retry for untrusted root failures."
      # We are experiencing issues with NuGet package restoration stating, "The author primary signature validity period has expired."
      # Details on this issue can be found here: https://github.com/dotnet/arcade/issues/13070
      # Variable reference: https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu3028#retry-untrusted-root-failures
      NUGET_EXPERIMENTAL_CHAIN_BUILD_RETRY_POLICY: 3,1000

  # Use a disabled, empty script to display the section header in the pipeline UI.
  - script:
    displayName: === Plugin Installation ===
    condition: false

  # Necessary for signing the assemblies and packages.
  # YAML reference: https://devdiv.visualstudio.com/Engineering/_git/MicroBuild?path=/src/Tasks/SigningPlugin/task.json
  - task: MicroBuildSigningPlugin@4
    displayName: Install Signing Plugin
    inputs:
      signType: Test
      esrpSigning: true
 
  # Gets the signconfig.xml from the MicroBuild Signing plugin and sets the retry interval to 45 seconds.
  # This reduces the calls to the signing API (potentially increasing signing speed) and reduces the pipeline log bloat when polling signing completion.
  - powershell: . '$(Build.SourcesDirectory)/eng/scripts/SetSigningRetryInterval.ps1' -signConfigPath ((Get-ChildItem -Path '$(Build.StagingDirectory)/MicroBuild/Plugins/*/build/signconfig.xml').FullName) -intervalInSeconds 45
    displayName: Set Signing Interval
    # This is not a necessary task for the build to be successful.
    continueOnError: true

  # This requires the OptimizationInputs via the 'Publish OptimizationInputs drop' step in the release pipeline.
  # To generate ProfilingInputs for the first time, set this input: ShouldSkipOptimize: true
  # See documentation here: https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/2602/Build-With-Expired-(or-Without-Prior)-Optimization-Profiling-Data
  # This plugin will restore MicroBuild.Plugins.OptProf which is required to create ProfilingInputs data.
  # The projects include OptProf.targets which uses MicroBuild.Plugins.OptProf to run the target GenerateProfilingInputs on each project.
  - task: MicroBuildOptProfPlugin@6
    displayName: Install OptProf Plugin
    inputs:
      ProfilingInputsDropName: ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)
      OptimizationInputsLookupMethod: DropPrefix
      DropNamePrefix: OptimizationInputs/$(System.TeamProject)/$(Build.Repository.Name)
      AccessToken: $(System.AccessToken)
      feedSource: https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json
      ShouldSkipOptimize: false
      # This value determines how old the optimization data is allowed to be.
      # If the delta of the number of commits between the commit used for the last produced optimization data and the current commit is greater than this value,
      # this task will always fail. The only way to fix it is produce new optimization data.
      # A temporary fix is to increase this value. However, it may cause a perf regression since eventually, the optimization data will no longer be aligned with the actual source content in the repo.
      NumberCommitsToSearch: 100
      
  # Required for the MicroBuildBuildVSBootstrapper task. See description above that task for details.
  # This should not be installed prior to building the repo as it may interfere with building the swixproj and vsmanproj projects.
  - task: MicroBuildSwixPlugin@4
    displayName: Install Swix Plugin

  # Sets the VisualStudioMinimumVersion variable for the job. This variable is also used by the APIScan job.
  # https://docs.microsoft.com/azure/devops/pipelines/process/set-variables-scripts?view=azure-devops&tabs=powershell#set-variable-properties
  - powershell: Write-Host "##vso[task.setvariable variable=VisualStudioMinimumVersion;isoutput=true]$(. '$(Build.SourcesDirectory)/eng/scripts/GetVisualStudioMinimumVersion.ps1')"
    displayName: Set VisualStudioMinimumVersion Variable
    # Name is required to reference the variables created within this build step in other stages.
    name: SetVisualStudioMinimumVersionVariable

  # Creates the VS bootstrapper information based on the build's .vsman file.
  # This bootstrapper information is only used for OptProf currently.
  # Since this data will be output with rest of our insertion files, we produce this data now and publish it in the build artifacts.
  # This task creates 2 assets:
  # - The bootstrapper metadata file: $(Build.StagingDirectory)/MicroBuild/Output/BootstrapperInfo.json
  # - The bootstrapper executable (and associated files): [outputFolder]/bootstrapper
  # This task requires these plugins:
  # - MicroBuildSigningPlugin: uses signjson.exe to sign the manifests
  # - MicroBuildSwixPlugin: uses vsman.exe and sets the environment variable ManifestPublishUrl
  # Documentation: https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/643/How-to-Build-a-Bootstrapper
  - task: MicroBuildBuildVSBootstrapper@3
    displayName: Build VS Bootstrapper
    inputs:
      bootstrapperCoreVersion: latest
      vsMajorVersion: $(SetVisualStudioMinimumVersionVariable.VisualStudioMinimumVersion)
      channelName: int.main
      manifests: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/VSSetup/Insertion/SetupManifest.vsman
      # Outputting to the Insertion folder allows the bootstrapper to be published to the Products drop, along with our insertion files.
      # The merged .vsman (OverlaidInstallerManifest.vsman) created by the bootstrapper assumes the bootstrapper will be output to the same drop (Products) as the insertion files.
      outputFolder: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/VSSetup/Insertion


  # The .artifactignore file filters the artifacts published from a particular folder.
  # This must be present in the folder we want to publish and be named '.artifactignore'.
  # See: https://docs.microsoft.com/azure/devops/artifacts/reference/artifactignore?view=azure-devops
  - powershell: Copy-Item -Path '$(Build.SourcesDirectory)/eng/pipelines/configuration/staging.artifactignore' -Destination '$(Build.StagingDirectory)/.artifactignore'
    displayName: Copy Staging Artifact Filter
    condition: succeededOrFailed()

  # Publishes the staging folder contents to the Azure Pipeline for use in other jobs/stages.
  # The Build.StagingDirectory is used by certain plugin outputs, such as MicroBuild and OptProf.
  - publish: $(Build.StagingDirectory)
    displayName: Publish Staging Artifacts
    artifact: Staging
    condition: succeededOrFailed()

  - script:
    displayName: === Upload VS Drop (not used for insertion, only used for OptProf) ===
    condition: false

  # This creates the Products drop location and uploads the insertion data (.vsman files) for VS insertion.
  # This also includes the bootstrapper files (.exe and .vsman) necessary for OptProf.
  # YAML reference: https://dev.azure.com/devdiv/Engineering/_git/MicroBuild?path=/src/Tasks/UploadDrop/task.json
  - task: MicroBuildUploadVstsDropFolder@2
    displayName: Publish Insertion Data (not used to create insertion)
    inputs:
      DropFolder: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/VSSetup/Insertion
      # TODO: Consider using $(GitBuildVersion) instead of $(Build.BuildNumber) as it better correlates the build of the code to the VS insertion.
      # Meaning, instead of VS Insertion -> Pipeline BuildNumber -> Code BuildVersion, it would just be VS Insertion -> Code BuildVersion.
      # If this is updated, VstsDropNames set in build-official-release.yml would also need to be updated.
      # For GitBuildVersion: https://github.com/dotnet/Nerdbank.GitVersioning/blob/main/doc/cloudbuild.md#automatically-match-cloud-build-numbers-to-to-your-git-version
      # Issue: https://github.com/dotnet/project-system/issues/8431
      # Example of current path: 'Products/[DevDiv]/[dotnet/project-system]/[main]/[x.x]'
      DropName: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)
      DropRetentionDays: 60
      # When this isn't provided, the tool sets the --AadAuth flag instead of using --PatAuthEnvVar. The AadAuth doesn't seem to work for this situation.
      AccessToken: $(System.AccessToken)

  ###################################################################################################################################################################
  # PUBLISH OPTPROF
  # The published OptProf metadata is consumed by the Optimization pipeline that profiles the assemblies to create the optimization data.
  ###################################################################################################################################################################

  # Use a disabled, empty script to display the section header in the pipeline UI.
  - script:
    displayName: === Publish OptProf ===
    condition: false

# Download the staging artifacts from the Build job.
  - download: current
    displayName: Download Staging Artifacts
    artifact: Staging
    # Only download the necessary files for publishing.
    patterns: |
      OptProf/**

  # This is required to deploy the tests to devdiv.artifacts.visualstudio.com for the 'Deploy tests' step in the release pipeline.
  # https://eng.ms/docs/cloud-ai-platform/developer-services/one-engineering-system-1es/1es-docs/azure-artifacts/drop-service/using-azure-devops-drop-in-devops-build
  - task: artifactDropTask@1
    displayName: Publish ProfilingInputs
    inputs:
      dropServiceURI: https://devdiv.artifacts.visualstudio.com
      buildNumber: ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)
      sourcePath: $(Pipeline.Workspace)/Staging/OptProf/ProfilingInputs
      toLowerCase: false
      # For deeper investigation, uncomment the following line:
      # detailedLog: true
      # This task uploads the drop metadata to the pipeline artifacts using this name. There does not seem to be an option of not uploading this metadata.
      dropMetadataContainerName: OptProf-ProfilingInputs

  # The current artifactDropTask seems to try making the DropMetadata folder every time it runs. After running this artifactDropTask for ProfilingInputs, we need to delete the folder so the artifactDropTask for RunSettings succeeds.
  # Otherwise, the error is shown as follows:
  #   ##[warning]Can't find loc string for key: FailedToRunClientTool
  #   ##[error]FailedToRunClientTool EEXIST: file already exists, mkdir 'D:\a\_work\1\a\DropMetadata'
  - powershell: Remove-Item -Path '$(Build.StagingDirectory)/DropMetadata/' -Recurse -Force
    displayName: Delete DropMetadata Folder

  # Using the VS bootstrapper data, update the runsettings with the appropriate information for this build.
  - powershell: . '$(Build.SourcesDirectory)/eng/scripts/UpdateRunSettings.ps1' -profilingInputsPath 'ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)' -bootstrapperInfoPath '$(Pipeline.Workspace)/Staging/MicroBuild/Output/BootstrapperInfo.json'
    displayName: Update RunSettings
    failOnStderr: true
    # Name is required to reference the variables created within this build step in other stages.
    name: UpdateRunSettings

  # The runsettings drives the test process for producing optimization data.
  # https://eng.ms/docs/cloud-ai-platform/developer-services/one-engineering-system-1es/1es-docs/azure-artifacts/drop-service/using-azure-devops-drop-in-devops-build
  - task: artifactDropTask@1
    displayName: Publish RunSettings
    inputs:
      dropServiceURI: https://devdiv.artifacts.visualstudio.com
      buildNumber: RunSettings/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)
      sourcePath: $(Build.SourcesDirectory)/eng/scripts/runsettings
      toLowerCase: false
      # For deeper investigation, uncomment the following line:
      # detailedLog: true
      # This task uploads the drop metadata to the pipeline artifacts using this name. There does not seem to be an option of not uploading this metadata.
      dropMetadataContainerName: OptProf-RunSettings
